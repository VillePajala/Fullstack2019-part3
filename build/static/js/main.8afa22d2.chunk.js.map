{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","services_persons","axios","get","then","response","data","newObject","post","id","put","concat","delete","Notification","_ref","message","color","react_default","a","createElement","className","Filter","_ref2","filterName","changeHandler","value","onChange","PersonForm","_ref3","submitHandler","newName","newNumber","nameChangeHandler","numberChangeHandler","onSubmit","type","Persons","_ref4","names","App","_useState","useState","_useState2","Object","slicedToArray","persons","setPersons","_useState3","_useState4","setNewName","_useState5","_useState6","setNewNumber","_useState7","_useState8","setFilterName","_useState9","_useState10","setMessage","_useState11","_useState12","setColor","useEffect","personService","initialPersons","addPerson","name","number","returnedPerson","setTimeout","catch","error","errorMessage","substr","split","console","log","updatePerson","personToUpdate","filter","person","toLowerCase","changedPerson","objectSpread","map","App_Notification","App_Filter","event","target","App_PersonForm","preventDefault","some","window","confirm","App_Persons","includes","key","onClick","targetPerson","deletedPerson","deletePerson","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8afa22d2.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons' // kehitysympäristö = 'http://localhost:3001/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst del = id => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n\r\nexport default { getAll, create, update, del }","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport './index.css';\nimport personService from './services/persons'\n\nconst Notification = ({ message, color }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={color}>\n      {message}\n    </div>\n  )\n}\n\n\nconst Filter = ({filterName, changeHandler}) => {\n  return (\n    <div>\n      filter shown with \n      <input value={filterName} onChange={changeHandler}/>\n    </div>\n  )\n}\n\nconst PersonForm = ({submitHandler, newName, newNumber, nameChangeHandler, numberChangeHandler}) => {\n  return (\n    <div>\n      <form onSubmit={submitHandler}>\n        <div>\n          name: \n          <input value={newName} onChange={nameChangeHandler}/>\n        </div>\n          number: \n          <input value={newNumber} onChange={numberChangeHandler}/>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nconst Persons = ({names}) => {\n  return (\n    <div>\n      {names}\n    </div>\n  )\n}\n\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filterName, setFilterName ] = useState('')\n  const [ message, setMessage ] = useState(null)\n  const [ color, setColor ] = useState('')\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const personCheck = (event) => {\n    event.preventDefault()\n    if (persons.some(person => person.name.toLowerCase() === newName.toLowerCase())) {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        updatePerson(newName)\n      }\n    } else {\n      addPerson()\n    }\n  }\n\n  const addPerson = () => {\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n  \n    personService\n      .create(personObject)\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        setColor('message')\n        setMessage(`Added ${returnedPerson.name}`)\n        setTimeout(() => {\n          setMessage(null)\n        }, 5000)\n        setNewName('')\n        setNewNumber('')\n      })\n      .catch(error => {\n        setColor('error')\n        let errorMessage = error.response.data.substr(121, 200)\n        errorMessage = errorMessage.split(\"<br>\")[0]\n        console.log(errorMessage)\n        setMessage(errorMessage)\n        setNewName('')\n        setNewNumber('')\n        /* setTimeout(() => {\n          setMessage(null)\n        }, 5000) */\n      })\n  }\n\n  const updatePerson = (newName) => {\n    const personToUpdate = persons.filter(person => person.name.toLowerCase() === newName)\n    const changedPerson = { ...personToUpdate[0], number: newNumber}\n    const id = (changedPerson.id)\n\n    personService\n      .update(id, changedPerson)\n      .then(returnedPerson => {\n        setPersons(persons.map(person => person.id !== id ? person : returnedPerson))\n        setNewName('')\n        setNewNumber('')\n        setColor('message')\n        setMessage(`Updated ${changedPerson.name}`)\n        setTimeout(() => {\n          setMessage(null)\n        }, 5000)\n      })\n      .catch(error => {\n        setColor('error')\n        setMessage(`Information of ${changedPerson.name} has already been removed from the server`)\n        setPersons(persons.filter(person => person.id !== id))\n        setNewName('')\n        setNewNumber('')\n        setTimeout(() => {\n          setMessage(null)\n        }, 5000)\n      })\n      \n  }\n\n  const deletePerson = (id) => {\n    const targetPerson = persons.filter(person => person.id === id)\n    if (window.confirm(`Delete ${targetPerson[0].name}?`)) {\n      personService\n      .del(id)\n      .then(deletedPerson => {\n        setColor('message')\n        setMessage(`Deleted ${targetPerson[0].name}`)\n        setTimeout(() => {\n          setMessage(null)\n        }, 5000)\n        setPersons(persons.filter(person => person.id !== id))\n      })\n      .catch(error => {\n        setColor('error')\n        setMessage(`Information of ${targetPerson[0].name} has already been moved from server`)\n        setPersons(persons.filter(person => person.id !== id))\n        setTimeout(() => {\n          setMessage(null)\n        }, 5000)\n      })\n    }  \n  }\n\n  const handlePersonsChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNumbersChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    setFilterName(event.target.value)\n  }\n\n    \n  const names = () => persons.map((person) => {\n    if (person.name.toLowerCase().includes(filterName.toLowerCase())) {\n      return <div key={person.name}>{person.name} {person.number}<button onClick={() => deletePerson(person.id)}>Delete</button></div>\n    } else {\n      return ''\n    }\n  })\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} color={color} />\n      <Filter \n        filterName={filterName} changeHandler={handleFilterChange} \n      />\n      <h2>Add a new</h2>\n      <PersonForm \n        submitHandler={personCheck} \n        newName={newName} \n        nameChangeHandler={handlePersonsChange}\n        newNumber={newNumber}\n        numberChangeHandler={handleNumbersChange}\n      />\n      <h2>Numbers</h2>\n      <Persons \n        names={names()}\n      />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}